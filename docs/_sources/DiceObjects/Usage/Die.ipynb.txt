{
 "cells": [
  {
   "attachments": {},
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Die Usage\n",
    "\n",
    "The `Die` object is simply a class which has a single attribute -- a list -- \n",
    "which represents the probability of a given face (the index in the list) being \n",
    "rolled."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "3\n",
      "0.3333333333333333\n",
      "True\n",
      "2\n"
     ]
    }
   ],
   "source": [
    "from cse587Autils.DiceObjects.Die import Die\n",
    "\n",
    "# you can instantiate an empty die and then populate it later\n",
    "fair_die = Die()\n",
    "\n",
    "# face probabilities (face_probs) is the name of the property that describes the probability of \n",
    "# rolling a given face. The faces themselves the index in the list. Remember \n",
    "# that python is zero indexed, so the faces in this case are 0,1,2\n",
    "fair_die.face_probs = [1/3]*3\n",
    "\n",
    "# we can get the 'length' of the die, which is of course the number of faces,\n",
    "# using the python built-in len() function\n",
    "print(len(fair_die))\n",
    "\n",
    "# and we can access faces using the [] operator\n",
    "print(fair_die[0])\n",
    "\n",
    "# rather than instantiating an empty Die and then filling it, we can also \n",
    "# use the constructor to instantiate a Die with a given number of faces and\n",
    "# probabilities (face_probs)\n",
    "biased_die = Die(face_probs=[0.1, 0.2, 0.7])\n",
    "\n",
    "# we can find the distance between two dice using the - operator. This returns \n",
    "# the sum of hte absolute difference between corresponding faces. Only Die with \n",
    "# the same number of faces can be subtracted from each other\n",
    "print(sum([abs(0.1-(1/3)), \n",
    "           abs(0.2-(1/3)), \n",
    "           abs(0.7-(1/3))]) \n",
    "           == (fair_die - biased_die) \n",
    "           == (biased_die - fair_die))\n",
    "\n",
    "# we can roll the die to produce a random face (given the face_probs)\n",
    "print(fair_die.roll())"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": ".venv",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.17"
  },
  "orig_nbformat": 4
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
